WITH TALL_PIVOT AS (
SELECT ID, OFFSET_ID, 'FTP' AS TYPE_INTERSECT
  , FTP_X AS X, FTP_Y AS Y
  , INTERSECT_FTP_X AS INTERSECT_X, INTERSECT_FTP_Y AS INTERSECT_Y, 
  FTP_DISTANCE AS INTERSECT_DISTANCE, FTP_SIDE AS INTERSECT_SIDE
FROM RAY_SPACING_1_RAY_RESULTS
UNION ALL
SELECT ID, OFFSET_ID, 'P25_PT' AS TYPE_INTERSECT
  , P25_PT_X AS X, P25_PT_Y AS Y
  , INTERSECT_P25_PT_X AS INTERSECT_X, INTERSECT_P25_PT_Y AS INTERSECT_Y, 
  P25_PT_DISTANCE AS INTERSECT_DISTANCE, P25_PT_SIDE AS INTERSECT_SIDE
FROM RAY_SPACING_1_RAY_RESULTS
UNION ALL -- UNION ALL is faster than UNION because it doesn't remove dup rows
SELECT ID, OFFSET_ID, 'MID_PT' AS TYPE_INTERSECT
  , MID_PT_X AS X, MID_PT_Y AS Y
  , INTERSECT_MID_PT_X AS INTERSECT_X, INTERSECT_MID_PT_Y AS INTERSECT_Y, 
  MID_PT_DISTANCE AS INTERSECT_DISTANCE, MID_PT_SIDE AS INTERSECT_SIDE
FROM RAY_SPACING_1_RAY_RESULTS
UNION ALL
SELECT ID, OFFSET_ID, 'P75_PT' AS TYPE_INTERSECT
  , P75_PT_X AS X, P75_PT_Y AS Y
  , INTERSECT_P75_PT_X AS INTERSECT_X, INTERSECT_P75_PT_Y AS INTERSECT_Y, 
  P75_PT_DISTANCE AS INTERSECT_DISTANCE, P75_PT_SIDE AS INTERSECT_SIDE
FROM RAY_SPACING_1_RAY_RESULTS
UNION ALL
SELECT ID, OFFSET_ID, 'LTP' AS TYPE_INTERSECT
  , LTP_X AS X, LTP_Y AS Y
  , INTERSECT_LTP_X AS INTERSECT_X, INTERSECT_LTP_Y AS INTERSECT_Y, 
  LTP_DISTANCE AS INTERSECT_DISTANCE, LTP_SIDE AS INTERSECT_SIDE
FROM RAY_SPACING_1_RAY_RESULTS
)

, NO_NULLS AS (
SELECT *
FROM TALL_PIVOT
WHERE INTERSECT_X IS NOT NULL 
)

, INITIAL_TALL AS (
SELECT *
FROM NO_NULLS
)

, POD_TARGETS AS (
SELECT DISTINCT ID, TARGET
FROM WELL_STICKS
WHERE ROW_EXPIRY_DATE > CURRENT_DATE AND ROW_DELETED_DATE IS NULL OR ROW_DELETED_DATE > CURRENT_DATE
)

, ONLINE_DATES_TBL AS (
SELECT DISTINCT ID, ON_PRODUCTION_DATE::DATE AS ON_PRODUCTION_DATE
FROM  BI.WELL
WHERE 
ON_PRODUCTION_DATE IS NOT NULL
AND ID IS NOT NULL
)

, FORMATION_TARGET_IP_DATE_JOINED AS (
SELECT RAY.*
, TARGET_WELL.TARGET AS TARGET
, OFFS.TARGET AS OFFSET_TARGET
, TARG_FORM_TBL.FORMATION AS FORMATION
, OFFS_FORM_TBL.FORMATION AS OFFSET_FORMATION
, TGT_ON_DATES.ON_PRODUCTION_DATE AS ON_PRODUCTION_DATE
, OFFS_ON_DATES.ON_PRODUCTION_DATE AS OFFSET_ON_PRODUCTION_DATE 
FROM INITIAL_TALL RAY
 LEFT JOIN POD_TARGETS TARGET_WELL
ON RAY.ID = TARGET_WELL.ID
LEFT JOIN POD_TARGETS OFFS
ON RAY.OFFSET_ID = OFFS.ID
LEFT JOIN TARGET_VS_FORMATION_1 TARG_FORM_TBL
ON TARGET_WELL.TARGET = TARG_FORM_TBL.TARGET
LEFT JOIN TARGET_VS_FORMATION_1 OFFS_FORM_TBL
ON OFFS.TARGET = OFFS_FORM_TBL.TARGET
LEFT JOIN ONLINE_DATES_TBL TGT_ON_DATES
ON RAY.ID = TGT_ON_DATES.ID
LEFT JOIN ONLINE_DATES_TBL OFFS_ON_DATES
ON RAY.ID = OFFS_ON_DATES.ID 
)

, RAY_2_OUTPUT AS (
SELECT * EXCLUDE (ON_PRODUCTION_DATE, OFFSET_ON_PRODUCTION_DATE)
, CASE WHEN ON_PRODUCTION_DATE IS NULL THEN DATE('2053-01-01') ELSE ON_PRODUCTION_DATE END AS ON_PRODUCTION_DATE
, CASE WHEN OFFSET_ON_PRODUCTION_DATE IS NULL THEN DATE('2050-01-01') ELSE OFFSET_ON_PRODUCTION_DATE END AS OFFSET_ON_PRODUCTION_DATE
FROM FORMATION_TARGET_IP_DATE_JOINED
)

, RAY_RANK_TBL AS (
SELECT *,
ROW_NUMBER() OVER (PARTITION BY ID, TYPE_INTERSECT, INTERSECT_SIDE ORDER BY INTERSECT_DISTANCE) AS RAY_RANK
FROM RAY_2_OUTPUT
)

--keep ray only to first offset
, FIRST_SPATIAL_TBL AS (
SELECT * EXCLUDE (RAY_RANK, X, Y, INTERSECT_X, INTERSECT_Y), 
TRY_TO_GEOMETRY(
        'LINESTRING(' || 
        X || ' ' || Y || ', ' || 
        INTERSECT_X || ' ' || INTERSECT_Y || ')'
    )
    AS GEOM_LINE,
ST_SETSRID(GEOM_LINE, 32040) AS GEOM_LINE_32040
FROM RAY_RANK_TBL
WHERE RAY_RANK = 1
)

SELECT * EXCLUDE (GEOM_LINE_32040, GEOM_LINE),
ST_ASWKB(GEOM_LINE_32040) AS GEOM_LINE_32040_WKB
FROM FIRST_SPATIAL_TBL