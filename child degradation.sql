CREATE OR REPLACE FUNCTION ST_FLAT_BUFFER(
    linestring STRING
  , distance FLOAT
)
RETURNS STRING
LANGUAGE PYTHON
RUNTIME_VERSION = '3.9'
PACKAGES = ('shapely')
HANDLER = 'flat_buffer'
AS
$$
from shapely import wkt
from shapely.geometry.base import CAP_STYLE

def flat_buffer(line, dist):
    if line is None or dist is None:
        return None
    geom = wkt.loads(line)
    buffered = geom.buffer(float(dist), cap_style=CAP_STYLE.flat)
    return buffered.wkt
$$
;

CREATE OR REPLACE FUNCTION ST_INTERSECT_GEOM_WKT(
    line_wkt STRING,
    buffer_wkt STRING
)
RETURNS STRING
LANGUAGE PYTHON
RUNTIME_VERSION = '3.9'
PACKAGES = ('shapely')
HANDLER = 'intersect_wkt'
AS
$$
from shapely import wkt

def intersect_wkt(line_wkt, buffer_wkt):
    if not line_wkt or not buffer_wkt:
        return None

    line_geom = wkt.loads(line_wkt)
    buffer_geom = wkt.loads(buffer_wkt)

    result = line_geom.intersection(buffer_geom)

    return result.wkt if not result.is_empty else None
$$
;

CREATE OR REPLACE PROCEDURE CHILD_DEGRADATION_QUERY_1()
RETURNS STRING
LANGUAGE SQL
AS
$$
BEGIN

CREATE OR REPLACE TABLE BOLTA_WELLS_AND_OFFSETS_1 AS

WITH INIT_TBL AS (
SELECT 
ID, FTP_X, FTP_Y, LTP_X, LTP_Y
FROM INIT_TBL_0
GROUP BY ID
HAVING ID IS NOT NULL
)

, GEOM_1_TBL AS (
SELECT ID, 
TRY_TO_GEOMETRY(
        'LINESTRING(' || 
        FTP_X || ' ' || FTP_Y || ', ' || 
        LTP_X || ' ' || LTP_Y || ')'
    )
    AS GEOM_LINE,
ST_SETSRID(GEOM_LINE, 32040) AS GEOM_LINE_32040
FROM INIT_TBL
WHERE GEOM_LINE IS NOT NULL)

, MOST_COMMON_TC_AREA AS (
SELECT ID, TC_AREA 
FROM (
  SELECT ID, TC_AREA, COUNT(*) AS FREQ,
  ROW_NUMBER() OVER (PARTITION BY ID ORDER BY COUNT(*) DESC, TC_AREA ASC) AS RN
  FROM WELL_STICKS
  WHERE ROW_EXPIRY_DATE > CURRENT_DATE AND ROW_DELETED_DATE IS NULL OR ROW_DELETED_DATE > CURRENT_DATE
  GROUP BY ID, TC_AREA
) RANKED
WHERE RN = 1
)

, LINES_AND_FLAT_BUFFER_TBL AS (
SELECT G.ID, TC.TC_AREA, 
--if I dont have a good type curve join, assume well spacing standard is 660
COALESCE(SP.CHILD_SAME_LAYER_DISTANCE_FT, 660) AS CHILD_SAME_LAYER_DISTANCE_FT
, GEOM_LINE_32040
, ST_ASWKT(GEOM_LINE_32040) AS GEOM_LINE_32040_WKT
, ST_FLAT_BUFFER(GEOM_LINE_32040_WKT, CHILD_SAME_LAYER_DISTANCE_FT * 1.1) AS BUFFERED_WKT -- 10% Error margin
, ST_SETSRID(TRY_TO_GEOMETRY(BUFFERED_WKT), 32040) AS GEOM_FLAT_BUFFER_32040
-- need to add 150' buffer for LEF vs UEF
, ST_FLAT_BUFFER(GEOM_LINE_32040_WKT, 150*1.1) AS BUFFERED_150_WKT
, ST_SETSRID(TRY_TO_GEOMETRY(BUFFERED_150_WKT), 32040) AS GEOM_FLAT_BUFFER_150_FT_32040
FROM GEOM_1_TBL G
LEFT JOIN MOST_COMMON_TC_AREA TC
ON G.ID = TC.ID
LEFT JOIN BOLTA_TYPE_CURVE_SPACINGS SP
ON TC.TC_AREA = SP.TC_AREA
)

, INTERSECTED_OFFSET_LINES AS (
SELECT B.ID AS TARGET_ID, L.ID AS OFFSET_ID
, B.GEOM_LINE_32040 AS TARGET_GEOM_LINE_32040
, L.GEOM_LINE_32040 AS OFFSET_GEOM_LINE_32040
, B.GEOM_FLAT_BUFFER_32040 AS TARGET_GEOM_FLAT_BUFFER_32040
FROM LINES_AND_FLAT_BUFFER_TBL B
INNER JOIN LINES_AND_FLAT_BUFFER_TBL L
ON ST_INTERSECTS(B.GEOM_FLAT_BUFFER_32040, L.GEOM_LINE_32040)
)

, INTERSECTED_OFFSET_LINES_150_FT AS (
SELECT B.ID AS TARGET_ID, L.ID AS OFFSET_ID
, B.GEOM_LINE_32040 AS TARGET_GEOM_LINE_32040
, L.GEOM_LINE_32040 AS OFFSET_GEOM_LINE_32040
, B.GEOM_FLAT_BUFFER_150_FT_32040 AS TARGET_GEOM_FLAT_BUFFER_150_FT_32040
FROM LINES_AND_FLAT_BUFFER_TBL B
INNER JOIN LINES_AND_FLAT_BUFFER_TBL L
ON ST_INTERSECTS(B.GEOM_FLAT_BUFFER_150_FT_32040, L.GEOM_LINE_32040)
)

, WELLS_AND_OFFSETS_1 AS (
SELECT B.* 
, SHORT.TARGET_GEOM_FLAT_BUFFER_150_FT_32040
FROM INTERSECTED_OFFSET_LINES B --normal buffer sizes
LEFT JOIN INTERSECTED_OFFSET_LINES_150_FT SHORT
ON B.TARGET_ID = SHORT.TARGET_ID
AND B.OFFSET_ID = SHORT.OFFSET_ID
)

SELECT *
FROM WELLS_AND_OFFSETS_1
WHERE TARGET_ID != OFFSET_ID
;

RETURN 'BOLTA_WELLS_AND_OFFSETS_1 REFRESHED';
END;
$$;

CREATE OR REPLACE PROCEDURE CHILD_DEGRADATION_QUERY_2()
RETURNS STRING
LANGUAGE SQL
AS
$$
BEGIN

CREATE OR REPLACE TABLE BOLTA_WELLS_AND_OFFSETS_2_OVERLAPS AS

WITH INTERSECTED_OFFSET_LINES_2 AS (
SELECT TARGET_ID, OFFSET_ID,
TARGET_GEOM_LINE_32040
, ST_INTERSECT_GEOM_WKT( ST_ASWKT(OFFSET_GEOM_LINE_32040), 
                                                    ST_ASWKT(TARGET_GEOM_FLAT_BUFFER_32040) ) AS OFFSET_LINE_IN_BUFFER_WKT
, ST_SETSRID(TRY_TO_GEOMETRY(OFFSET_LINE_IN_BUFFER_WKT), 32040) AS OFFSET_LINE_IN_BUFFER_32040
FROM BOLTA_WELLS_AND_OFFSETS_1
)

-- for now, with simple straight well segments from ltp and ftp
, VECTORS AS (
SELECT TARGET_ID, OFFSET_ID
  , ST_LENGTH(TARGET_GEOM_LINE_32040) AS T_LL
  , ST_LENGTH(OFFSET_LINE_IN_BUFFER_32040) AS O_LL
  , ST_POINTN(OFFSET_LINE_IN_BUFFER_32040, 1) AS O_START
  , ST_POINTN(OFFSET_LINE_IN_BUFFER_32040, ST_NUMPOINTS(OFFSET_LINE_IN_BUFFER_32040)) AS O_END
  , ST_POINTN(TARGET_GEOM_LINE_32040, 1) AS T_START
  , ST_POINTN(TARGET_GEOM_LINE_32040, ST_NUMPOINTS(TARGET_GEOM_LINE_32040)) AS T_END
  , ST_X(O_START) AS O_START_X, ST_Y(O_START) AS O_START_Y
  , ST_X(O_END) AS O_END_X, ST_Y(O_END) AS O_END_Y
  , ST_X(T_START) AS T_START_X, ST_Y(T_START) AS T_START_Y
  , ST_X(T_END) AS T_END_X, ST_Y(T_END) AS T_END_Y
  , ((
            (O_END_X - O_START_X) * (T_END_X - T_START_X) +
            (O_END_Y - O_START_Y) * (T_END_Y - T_START_Y)
        ) / T_LL
    ) AS PROJECTED_LENGTH
  , CASE WHEN PROJECTED_LENGTH > T_LL THEN 1 ELSE PROJECTED_LENGTH / T_LL END AS OFFSET_ONTO_TARGET_OVERLAP_PERCENT
FROM INTERSECTED_OFFSET_LINES_2
)

SELECT TARGET_ID, OFFSET_ID
, ABS(OFFSET_ONTO_TARGET_OVERLAP_PERCENT) AS OFFSET_ONTO_TARGET_OVERLAP_PERCENT 
FROM VECTORS
;

CREATE OR REPLACE TABLE BOLTA_WELLS_AND_OFFSETS_2B_OL_150_FT AS

WITH INTERSECTED_OFFSET_LINES_150_FT_2 AS (
SELECT TARGET_ID, OFFSET_ID,
TARGET_GEOM_LINE_32040
, ST_INTERSECT_GEOM_WKT( ST_ASWKT(OFFSET_GEOM_LINE_32040), 
                                                    ST_ASWKT(TARGET_GEOM_FLAT_BUFFER_150_FT_32040) ) AS OFFSET_LINE_IN_BUFFER_150_FT_WKT
, ST_SETSRID(TRY_TO_GEOMETRY(OFFSET_LINE_IN_BUFFER_150_FT_WKT), 32040) AS OFFSET_LINE_IN_BUFFER_150_FT_32040
FROM BOLTA_WELLS_AND_OFFSETS_1
WHERE TARGET_GEOM_FLAT_BUFFER_150_FT_32040 IS NOT NULL
)

, VECTORS_150_FT AS (
SELECT TARGET_ID, OFFSET_ID
  , ST_LENGTH(TARGET_GEOM_LINE_32040) AS T_LL
  , ST_LENGTH(OFFSET_LINE_IN_BUFFER_150_FT_32040) AS O_LL
  , ST_POINTN(OFFSET_LINE_IN_BUFFER_150_FT_32040, 1) AS O_START
  , ST_POINTN(OFFSET_LINE_IN_BUFFER_150_FT_32040, ST_NUMPOINTS(OFFSET_LINE_IN_BUFFER_150_FT_32040)) AS O_END
  , ST_POINTN(TARGET_GEOM_LINE_32040, 1) AS T_START
  , ST_POINTN(TARGET_GEOM_LINE_32040, ST_NUMPOINTS(TARGET_GEOM_LINE_32040)) AS T_END
  , ST_X(O_START) AS O_START_X, ST_Y(O_START) AS O_START_Y
  , ST_X(O_END) AS O_END_X, ST_Y(O_END) AS O_END_Y
  , ST_X(T_START) AS T_START_X, ST_Y(T_START) AS T_START_Y
  , ST_X(T_END) AS T_END_X, ST_Y(T_END) AS T_END_Y
  , ((
            (O_END_X - O_START_X) * (T_END_X - T_START_X) +
            (O_END_Y - O_START_Y) * (T_END_Y - T_START_Y)
        ) / T_LL
    ) AS PROJECTED_LENGTH
  , CASE WHEN PROJECTED_LENGTH > T_LL THEN 1 ELSE PROJECTED_LENGTH / T_LL END AS OFFSET_ONTO_TARGET_OVERLAP_PERCENT_150_FT
FROM INTERSECTED_OFFSET_LINES_150_FT_2
)

SELECT TARGET_ID, OFFSET_ID
, ABS(OFFSET_ONTO_TARGET_OVERLAP_PERCENT_150_FT) AS OFFSET_ONTO_TARGET_OVERLAP_PERCENT_150_FT
FROM VECTORS_150_FT
;

RETURN 'BOLTA_WELLS_AND_OFFSETS_2_OVERLAPS and BOLTA_WELLS_AND_OFFSETS_2B_OL_150_FT refreshed';
END;
$$;

CREATE OR REPLACE PROCEDURE CHILD_DEGRADATION_QUERY_3()
RETURNS STRING
LANGUAGE SQL
AS
$$
BEGIN

CREATE OR REPLACE TABLE BOLTA_WELLS_AND_OFFSETS_3_DEGRADATIONS AS

WITH POD_1 AS (
SELECT ID, API_12, TARGET 
FROM WELL_STICKS
WHERE ROW_EXPIRY_DATE > CURRENT_DATE AND ROW_DELETED_DATE IS NULL OR ROW_DELETED_DATE > CURRENT_DATE
)

-- check for dups
/*SELECT ID, 
COUNT(TARGET) AS COUNT_TARGET
FROM POD_1
GROUP BY ID
HAVING COUNT_TARGET > 1
LIMIT 50;*/

, TARGETS_TBL AS (
SELECT OL.TARGET_ID, OL.OFFSET_ID, LEFT(O.API_12, 10) AS OFFSET_API_10
, OL.OFFSET_ONTO_TARGET_OVERLAP_PERCENT
, FT_150.OFFSET_ONTO_TARGET_OVERLAP_PERCENT_150_FT
, T.TARGET AS TARGET_TARGET, O.TARGET AS OFFSET_TARGET
FROM BOLTA_WELLS_AND_OFFSETS_2_OVERLAPS OL
LEFT JOIN POD_1 T
ON OL.TARGET_ID = T.ID
LEFT JOIN POD_1 O
ON OL.TARGET_ID = O.ID
LEFT JOIN BOLTA_WELLS_AND_OFFSETS_2B_OL_150_FT FT_150
ON OL.TARGET_ID = FT_150.TARGET_ID
AND OL.OFFSET_ID = FT_150.OFFSET_ID
)

, FORMATIONS_TBL_1 AS (
  SELECT TGT.*
  , TTF.FORMATION AS TARGET_FORMATION
  , OTF.FORMATION AS OFFSET_FORMATION  
  FROM TARGETS_TBL TGT
  LEFT JOIN BOLTA_TARGET_VS_FORMATION_1 TTF
  ON TGT.TARGET_TARGET = TTF.TARGET
  LEFT JOIN BOLTA_TARGET_VS_FORMATION_1 OTF
  ON TGT.OFFSET_TARGET = OTF.TARGET
)

, FORMATIONS_TBL AS (
  SELECT TARGET_ID, OFFSET_ID, OFFSET_API_10
  , OFFSET_ONTO_TARGET_OVERLAP_PERCENT, OFFSET_ONTO_TARGET_OVERLAP_PERCENT_150_FT
  , TARGET_TARGET, OFFSET_TARGET
  , CASE WHEN TARGET_TARGET IS NULL THEN 'UNKNOWN' ELSE TARGET_FORMATION END AS TARGET_FORMATION
  , CASE WHEN OFFSET_TARGET IS NULL THEN 'UNKNOWN' ELSE OFFSET_FORMATION END AS OFFSET_FORMATION
  FROM FORMATIONS_TBL_1
)

--check for any logic missing from formations logic
--SELECT * FROM FORMATIONS_TBL 
--WHERE TARGET_FORMATION IS NULL LIMIT 50;

, COMBINED_OL_TBL AS (
SELECT TARGET_ID, OFFSET_ID, OFFSET_API_10
, OFFSET_ONTO_TARGET_OVERLAP_PERCENT AS COALESCED_OFFSET_ONTO_TARGET_OL_PERCENT
, TARGET_FORMATION, OFFSET_FORMATION -- included as a check
FROM FORMATIONS_TBL
WHERE TARGET_FORMATION = OFFSET_FORMATION
UNION
SELECT TARGET_ID, OFFSET_ID, OFFSET_API_10
, OFFSET_ONTO_TARGET_OVERLAP_PERCENT_150_FT AS COALESCED_OFFSET_ONTO_TARGET_OL_PERCENT 
, TARGET_FORMATION, OFFSET_FORMATION -- included as a check
FROM FORMATIONS_TBL
WHERE TARGET_FORMATION != OFFSET_FORMATION
AND OFFSET_ONTO_TARGET_OVERLAP_PERCENT_150_FT IS NOT NULL
)

, PDP_PPF_TBL AS (
SELECT UWI, MAX(PROPPANT_FOOT) AS PROPPANT_FOOT --prop per foot
FROM WELL_MEASUREMENT_PIVOT
WHERE UWI IS NOT NULL
AND PROPPANT_FOOT IS NOT NULL
GROUP BY UWI
)

, PROP_JOIN_TBL AS (
SELECT C.*
, PROPPANT_FOOT AS OFFSET_PPF
, CASE WHEN OFFSET_PPF >= 1700 THEN 'LARGE'
   WHEN OFFSET_PPF < 1700 THEN 'SMALL'
   ELSE 'LARGE' END AS PARENT_COMPLETION_SIZE --assume missing's are for future wells; and all future wells are large cmpl
FROM COMBINED_OL_TBL C
LEFT JOIN PDP_PPF_TBL PPF
ON C.OFFSET_API_10 = PPF.UWI
WHERE COALESCED_OFFSET_ONTO_TARGET_OL_PERCENT >= 0.2
)

, TC_AREA_TBL AS (
SELECT DISTINCT TC_AREA, ID
FROM WELL_STICKS
WHERE ROW_EXPIRY_DATE > CURRENT_DATE AND ROW_DELETED_DATE IS NULL OR ROW_DELETED_DATE > CURRENT_DATE
)

, ADD_TC_AREA AS (
SELECT PROP.*
, TC.TC_AREA AS TARGET_TC_AREA
FROM PROP_JOIN_TBL PROP
LEFT JOIN TC_AREA_TBL TC
ON PROP.TARGET_ID = TC.ID
)

, MULTI_DEGRADATION AS (
SELECT TC_AREA, PARENT_COMPLETION_TYPE, DEGRADATION_MULTIPLIER AS DEGRADATION_MULTIPLIER_MULTI
FROM BOLTA_TYPE_CURVE_DEGRADATION_RULES
WHERE PARENT_COUNT = 'MULTI'
)

, SINGLE_DEGRADATION AS (
SELECT TC_AREA, PARENT_COMPLETION_TYPE, DEGRADATION_MULTIPLIER AS DEGRADATION_MULTIPLIER_SINGLE
FROM BOLTA_TYPE_CURVE_DEGRADATION_RULES
WHERE PARENT_COUNT = 'SINGLE'
)

, JOIN_READY_DEGRADATION_TBL AS (
SELECT M.*
, S.DEGRADATION_MULTIPLIER_SINGLE
FROM MULTI_DEGRADATION M
LEFT JOIN SINGLE_DEGRADATION S
ON M.TC_AREA = S.TC_AREA
AND M.PARENT_COMPLETION_TYPE = S.PARENT_COMPLETION_TYPE
)

, DEGRADATIONS_JOIN_1 AS (
SELECT ATA.*
, JRD.DEGRADATION_MULTIPLIER_MULTI, JRD.DEGRADATION_MULTIPLIER_SINGLE
FROM ADD_TC_AREA ATA
LEFT JOIN JOIN_READY_DEGRADATION_TBL JRD
ON ATA.TARGET_TC_AREA = JRD.TC_AREA
AND ATA.PARENT_COMPLETION_SIZE = JRD.PARENT_COMPLETION_TYPE
)

--do some corrections on the TC area
--figure out if TC_AREA is Phase 1, GW, SL, etc.
, TBL_TARGET_TC_REGION_1 AS (
SELECT *
, POSITION('_' IN TARGET_TC_AREA) AS UNDERSCORE_1
, SUBSTR(TARGET_TC_AREA, UNDERSCORE_1 + 1) AS TARGET_TC_REGION_1
, POSITION('_' IN TARGET_TC_REGION_1) AS UNDERSCORE_2
, SUBSTR(TARGET_TC_REGION_1, 1, UNDERSCORE_2 - 1) AS TARGET_TC_REGION
FROM DEGRADATIONS_JOIN_1
)

, TBL_TARGET_TC_REGION_2 AS (
SELECT * EXCLUDE (UNDERSCORE_1, TARGET_TC_REGION_1, UNDERSCORE_2)
FROM TBL_TARGET_TC_REGION_1
)

--some rows had missing TC_AREA but could infer TC_region from ID
, TBL_WITH_TARGET_TC_REGION AS (
SELECT TARGET_ID, OFFSET_ID, OFFSET_API_10, COALESCED_OFFSET_ONTO_TARGET_OL_PERCENT,
TARGET_FORMATION, OFFSET_FORMATION, OFFSET_PPF, PARENT_COMPLETION_SIZE,
TARGET_TC_AREA, DEGRADATION_MULTIPLIER_MULTI, DEGRADATION_MULTIPLIER_SINGLE
, CASE 
    WHEN TARGET_TC_REGION IS NULL AND POSITION('SL' IN TARGET_ID) > 0 THEN 'SL'
    WHEN TARGET_TC_REGION IS NULL AND POSITION('GW' IN TARGET_ID) > 0 THEN 'GW'
    ELSE TARGET_TC_REGION END AS TARGET_TC_REGION
FROM TBL_TARGET_TC_REGION_2
)

, REGION_DEGRADATION_1 AS (
SELECT PARENT_COMPLETION_TYPE, DEGRADATION_MULTIPLIER_MULTI, DEGRADATION_MULTIPLIER_SINGLE
, POSITION('_' IN TC_AREA) AS UNDERSCORE_1
, SUBSTR(TC_AREA, UNDERSCORE_1 + 1) AS TC_REGION_1
, POSITION('_' IN TC_REGION_1) AS UNDERSCORE_2
, SUBSTR(TC_REGION_1, 1, UNDERSCORE_2 - 1) AS TC_REGION
FROM JOIN_READY_DEGRADATION_TBL
) 

, JOIN_READY_REGION_DEGRADATION_TBL AS (
SELECT DISTINCT PARENT_COMPLETION_TYPE, TC_REGION
, DEGRADATION_MULTIPLIER_MULTI, DEGRADATION_MULTIPLIER_SINGLE
FROM REGION_DEGRADATION_1
)

, DEGRADATIONS_TBL_2 AS (
SELECT TTR.TARGET_ID, TTR.OFFSET_ID, TTR.OFFSET_API_10
, TTR.COALESCED_OFFSET_ONTO_TARGET_OL_PERCENT
, TTR.TARGET_FORMATION, TTR.OFFSET_FORMATION
, TTR.OFFSET_PPF, TTR.PARENT_COMPLETION_SIZE
, TTR.TARGET_TC_AREA, TTR.TARGET_TC_REGION
, COALESCE(TTR.DEGRADATION_MULTIPLIER_MULTI, RD.DEGRADATION_MULTIPLIER_MULTI) AS DEGRADATION_MULTIPLIER_MULTI
, COALESCE(TTR.DEGRADATION_MULTIPLIER_SINGLE, RD.DEGRADATION_MULTIPLIER_SINGLE) AS DEGRADATION_MULTIPLIER_SINGLE
FROM TBL_WITH_TARGET_TC_REGION TTR
LEFT JOIN JOIN_READY_REGION_DEGRADATION_TBL RD
ON TTR.TARGET_TC_REGION = RD.TC_REGION
AND TTR.PARENT_COMPLETION_SIZE = RD.PARENT_COMPLETION_TYPE
)

, ONLINE_DATES_TBL AS (
SELECT DISTINCT ID, ON_PRODUCTION_DATE::DATE AS ON_PRODUCTION_DATE
FROM  BI.WELL
WHERE 
ON_PRODUCTION_DATE IS NOT NULL
AND ID IS NOT NULL
)

, INITIAL_DATES_TBL AS (
SELECT DEG.*
, DTS_TGT.ON_PRODUCTION_DATE AS TARGET_ON_PRODUCTION_DATE
, DTS_OFFSET.ON_PRODUCTION_DATE AS OFFSET_ON_PRODUCTION_DATE
FROM DEGRADATIONS_TBL_2 DEG
LEFT JOIN ONLINE_DATES_TBL DTS_TGT
ON DEG.TARGET_ID = DTS_TGT.ID
LEFT JOIN ONLINE_DATES_TBL DTS_OFFSET
ON DEG.OFFSET_ID = DTS_OFFSET.ID
)

, IMPUTE_DATES_TBL AS (
SELECT TARGET_ID, OFFSET_ID, OFFSET_API_10,
COALESCED_OFFSET_ONTO_TARGET_OL_PERCENT, 
TARGET_FORMATION, OFFSET_FORMATION, OFFSET_PPF,
PARENT_COMPLETION_SIZE, TARGET_TC_AREA, TARGET_TC_REGION,
DEGRADATION_MULTIPLIER_MULTI, DEGRADATION_MULTIPLIER_SINGLE
, CASE WHEN TARGET_ON_PRODUCTION_DATE IS NULL THEN DATE('2053-01-01')
ELSE TARGET_ON_PRODUCTION_DATE END AS TARGET_ON_PRODUCTION_DATE
, CASE WHEN OFFSET_ON_PRODUCTION_DATE IS NULL THEN DATE('2050-01-01')
ELSE OFFSET_ON_PRODUCTION_DATE END AS OFFSET_ON_PRODUCTION_DATE
FROM INITIAL_DATES_TBL
)

SELECT *
FROM IMPUTE_DATES_TBL
WHERE TARGET_ON_PRODUCTION_DATE - OFFSET_ON_PRODUCTION_DATE >= 540 --use 1.5 years difference
;

RETURN 'BOLTA_WELLS_AND_OFFSETS_3_DEGRADATIONS refreshed';
END;
$$;

CREATE OR REPLACE PROCEDURE CHILD_DEGRADATION_QUERY_1_THRU_3()
RETURNS STRING
LANGUAGE SQL
AS
$$
BEGIN
  CALL CHILD_DEGRADATION_QUERY_1();
  CALL CHILD_DEGRADATION_QUERY_2();
  CALL CHILD_DEGRADATION_QUERY_3();
  RETURN 'ALL 3 child degradation tables refreshed successfully';
END;
$$;

CALL CHILD_DEGRADATION_QUERY_1_THRU_3();