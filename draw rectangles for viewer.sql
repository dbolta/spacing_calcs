-- the query for when the query uses 5 rectangles
--just do minimum
WITH INIT_TBL AS (
SELECT *
, ROW_NUMBER() OVER (PARTITION BY ID, TGT_WELL_PIECE, SIDE ORDER BY BOX_LENGTH) AS BOX_LENGTH_RANK_ON_SIDE
FROM RECTANGLE_TBL
)

, CLOSEST_OFFSET_BOX AS (
SELECT * EXCLUDE BOX_LENGTH_RANK_ON_SIDE
FROM INIT_TBL
WHERE BOX_LENGTH_RANK_ON_SIDE = 1
)

--need to update ORIGINAL_FTP/LTP for segments of the well matching TGT_WELL_PIECE
, WELLS_SEGMENTED AS (
SELECT * EXCLUDE (ORIGINAL_FTP_X, ORIGINAL_FTP_Y, ORIGINAL_LTP_X, ORIGINAL_LTP_Y)
, CASE WHEN TGT_WELL_PIECE = 1 THEN 1/5 * ORIGINAL_FTP_X + 4/5 * ORIGINAL_LTP_X
  WHEN TGT_WELL_PIECE = 2 THEN 2/5 * ORIGINAL_FTP_X + 3/5 * ORIGINAL_LTP_X
  WHEN TGT_WELL_PIECE = 3 THEN 3/5 * ORIGINAL_FTP_X + 2/5 * ORIGINAL_LTP_X
  WHEN TGT_WELL_PIECE = 4 THEN 4/5 * ORIGINAL_FTP_X + 1/5 * ORIGINAL_LTP_X
  WHEN TGT_WELL_PIECE = 5 THEN ORIGINAL_FTP_X 
  ELSE NULL END AS ORIGINAL_FTP_X

, CASE WHEN TGT_WELL_PIECE = 1 THEN 1/5 * ORIGINAL_FTP_Y + 4/5 * ORIGINAL_LTP_Y
  WHEN TGT_WELL_PIECE = 2 THEN 2/5 * ORIGINAL_FTP_Y + 3/5 * ORIGINAL_LTP_Y
  WHEN TGT_WELL_PIECE = 3 THEN 3/5 * ORIGINAL_FTP_Y + 2/5 * ORIGINAL_LTP_Y
  WHEN TGT_WELL_PIECE = 4 THEN 4/5 * ORIGINAL_FTP_Y + 1/5 * ORIGINAL_LTP_Y
  WHEN TGT_WELL_PIECE = 5 THEN ORIGINAL_FTP_Y
  ELSE NULL END AS ORIGINAL_FTP_Y

, CASE WHEN TGT_WELL_PIECE = 1 THEN 0/5 * ORIGINAL_FTP_X + 5/5 * ORIGINAL_LTP_X
  WHEN TGT_WELL_PIECE = 2 THEN 1/5 * ORIGINAL_FTP_X + 4/5 * ORIGINAL_LTP_X
  WHEN TGT_WELL_PIECE = 3 THEN 2/5 * ORIGINAL_FTP_X + 3/5 * ORIGINAL_LTP_X
  WHEN TGT_WELL_PIECE = 4 THEN 3/5 * ORIGINAL_FTP_X + 2/5 * ORIGINAL_LTP_X
  WHEN TGT_WELL_PIECE = 5 THEN 4/5 * ORIGINAL_FTP_X + 1/5 * ORIGINAL_LTP_X
  ELSE NULL END AS ORIGINAL_LTP_X

, CASE WHEN TGT_WELL_PIECE = 1 THEN 0/5 * ORIGINAL_FTP_Y + 5/5 * ORIGINAL_LTP_Y
  WHEN TGT_WELL_PIECE = 2 THEN 1/5 * ORIGINAL_FTP_Y + 4/5 * ORIGINAL_LTP_Y
  WHEN TGT_WELL_PIECE = 3 THEN 2/5 * ORIGINAL_FTP_Y + 3/5 * ORIGINAL_LTP_Y
  WHEN TGT_WELL_PIECE = 4 THEN 3/5 * ORIGINAL_FTP_Y + 2/5 * ORIGINAL_LTP_Y
  WHEN TGT_WELL_PIECE = 5 THEN 4/5 * ORIGINAL_FTP_Y + 1/5 * ORIGINAL_LTP_Y
  ELSE NULL END AS ORIGINAL_LTP_Y
FROM CLOSEST_OFFSET_BOX
)

, ALL_COLS AS (
SELECT *
, SQRT(POWER(BOX_LENGTH,2) / (POWER(RAY_SLOPE,2) + 1)) AS DX
, SQRT(POWER(BOX_LENGTH,2) - POWER(DX,2)) AS DY
, CASE
  WHEN SIDE = 'EAST' THEN ORIGINAL_FTP_X + DX
  WHEN SIDE = 'WEST' THEN ORIGINAL_FTP_X - DX
ELSE NULL END AS FTP_BOX_X
, CASE
  WHEN SIDE = 'EAST' AND RAY_SLOPE >= 0 THEN ORIGINAL_FTP_Y + DY
  WHEN SIDE = 'EAST' AND RAY_SLOPE < 0 THEN ORIGINAL_FTP_Y - DY
  WHEN SIDE = 'WEST' AND RAY_SLOPE >= 0 THEN ORIGINAL_FTP_Y - DY
  WHEN SIDE = 'WEST' AND RAY_SLOPE < 0 THEN ORIGINAL_FTP_Y + DY
ELSE NULL END AS FTP_BOX_Y
--ltp
, CASE
  WHEN SIDE = 'EAST' THEN ORIGINAL_LTP_X + DX
  WHEN SIDE = 'WEST' THEN ORIGINAL_LTP_X - DX
ELSE NULL END AS LTP_BOX_X
, CASE
  WHEN SIDE = 'EAST' AND RAY_SLOPE >= 0 THEN ORIGINAL_LTP_Y + DY
  WHEN SIDE = 'EAST' AND RAY_SLOPE < 0 THEN ORIGINAL_LTP_Y - DY
  WHEN SIDE = 'WEST' AND RAY_SLOPE >= 0 THEN ORIGINAL_LTP_Y - DY
  WHEN SIDE = 'WEST' AND RAY_SLOPE < 0 THEN ORIGINAL_LTP_Y + DY
ELSE NULL END AS LTP_BOX_Y
, TRY_TO_GEOMETRY(
    'POLYGON((' ||
    ORIGINAL_FTP_X || ' ' || ORIGINAL_FTP_Y || ', ' ||
    FTP_BOX_X || ' ' || FTP_BOX_Y || ', ' ||
    LTP_BOX_X || ' ' || LTP_BOX_Y || ', ' ||
    ORIGINAL_LTP_X || ' ' || ORIGINAL_LTP_Y || ', ' ||  -- close the ring:
    ORIGINAL_FTP_X || ' ' || ORIGINAL_FTP_Y ||
    '))'
) AS GEOM_INTERSECT_RECTANGLE
, ST_SETSRID(GEOM_INTERSECT_RECTANGLE, 32040) AS GEOM_INTERSECT_RECTANGLE_32040
, ST_ASWKB(GEOM_INTERSECT_RECTANGLE_32040) AS GEOM_INTERSECT_RECTANGLE_32040_WKB

FROM WELLS_SEGMENTED
)

SELECT ID, TGT_WELL_PIECE, SIDE, BOX_LENGTH, GEOM_INTERSECT_RECTANGLE_32040_WKB
FROM ALL_COLS